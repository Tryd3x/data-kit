*Window functions*

# partition iterates over each distinct value of that col and provides sum over each distinct value of that col
sum(column) over (partition by col order by col asc|desc) 
lead(column, offset) over ()


*Conditional*

ifnull(column, replaced_val)
coalesce(column)

*String*

like '' #pattern matching
substr(col,start_index,stop_index)
lcase()
ucase()
trim()
ltrim()
rtrim()

*Date*
datediff(start_date, end_date)

*Math*

round()
roundup()
rounddown()
floor()
ceil()

*Cast*

*Misc*

You can use UNION ALL to initialize and update a table, 
Sample:

-- Initialize a table with inital price of products as 10
select
    product_id,
    10 as price
from
    products
group by
    product_id
having
    min(change_date) > '2019-08-16'
union all 
-- Update price based on price before date '2018-08-16'
select
    product_id,
    new_price as price
from
    products
where
    (product_id, change_date) in (
        select
            product_id,
            max(change_date)
        from    
            products
        where
            change_date <= '2019-08-16'
        group by
            product_id
    )

